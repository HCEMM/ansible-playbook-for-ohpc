---

# This file is distributed under the Apache License (the
# "License"); you may not use this file except in compliance
# with the License.  See the LICENSE file distributed with
# this work for additional information regarding copyright
# ownership.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This file is derived from recipe.sh in OpenHPC distribution
# and ported by Linaro Ltd. and Fujitsu Ltd.

#
# roles/warewulf/tasks/main.yml
#

# yum -y groupinstall ohpc-warewulf
- name: Install ohpc-warewulf on master
  ansible.builtin.dnf:
    state: present
    name:
      - ohpc-warewulf
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

# -----------------------------------------------------------
# Complete basic Warewulf setup for master node (Section 3.5)
# -----------------------------------------------------------

- name: Complete basic Warewulf setup for master node
  when:
    - inventory_hostname in groups[ nt_sms ]
    - enable_warewulf

  block:

  # perl -pi -e "s/device = eth1/device = ${sms_eth_internal}/" /etc/warewulf/provision.conf
    - name: Configure Warewulf provisioning to use desired internal interface (on master)
      ansible.builtin.replace:
        dest: /etc/warewulf/provision.conf
        regexp: 'device\s+=\s+eth1'
        replace: "device = {{ sms_eth_internal }}"
        backup: true

  # perl -pi -e "s/^\s+disable\s+= yes/ disable = no/" /etc/xinetd.d/tftp
    - name: Enable tftp service for computing node image distribution (on master)
      ansible.builtin.replace:
        dest: /etc/xinetd.d/tftp
        regexp: '^\s+disable\s+= yes'
        replace: "disable = no"
        backup: true

  # ifconfig ${sms_eth_internal} ${sms_ip} netmask ${internal_netmask} up
    - name: Enable internal interface for provisioning (on master)
      ansible.general.nmcli:
        conn_name: "{{ sms_eth_internal }}"
        state: up
        ip4: "V({{ sms_ip }}{{ '/24' if internal_netmask == '255.255.255.0' else '' }})"
      when:
        - not enable_ifup
        - not enable_dhcpd_server
        - ansible_facts['interfaces'][sms_eth_internal]['state'] != 'up'

  # Restart/enable relevant services to support provisioning
  # systemctl restart xinetd
    - name: Restart xinetd on master
      ansible.builtin.service:
        name: xinetd
        state: restarted

  # systemctl enable mariadb.service
    - name: Enable mariadb.service on master
      ansible.builtin.service:
        name: mariadb.service
        enabled: true

  # systemctl restart mariadb
    - name: Restart mariadb on master
      ansible.builtin.service:
        name: mariadb
        state: restarted

  # systemctl enable httpd.service
    - name: Enable httpd.service on master
      ansible.builtin.service:
        name: httpd.service
        enabled: true

  # systemctl restart httpd
    - name: Restart httpd on master
      ansible.builtin.service:
        name: httpd
        state: restarted

# -------------------------------------------------
# Create compute image for Warewulf (Section 3.6.1)
# -------------------------------------------------

# Override default OS repository (optional) - set YUM_MIRROR variable to desired repo location (on master)
# TODO:
# if [ ! -z ${BOS_MIRROR+x} ]; then
#     export YUM_MIRROR=${BOS_MIRROR}
# fi

- name: Create compute image for Warewulf
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

  block:

    - name: Touch ~/.bashrc on master
      ansible.builtin.file:
        path: "{{ ansible_home }}/.bashrc"
        state: touch
        mode: '0644'
      when:
        - enable_warewulf

    - name: "Add environment variable export CHROOT=compute_chroot_loc on master"
      ansible.builtin.lineinfile:
        path: "{{ ansible_home }}/.bashrc"
        state: present
        backrefs: false
        regexp: '^export CHROOT="{{ compute_chroot_loc }}$'
        line: 'export CHROOT="{{ compute_chroot_loc }}"'

# wwmkchroot centos-7 $CHROOT
- name: Build initial chroot image on master (only if not already created)
  ansible.builtin.command: wwmkchroot centos-7 "{{ compute_chroot_loc }}"
  register: result
  failed_when: result.rc not in [0, 1]
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf
  args:
    creates: "{{ compute_chroot_loc }}"

# ----------------------------------------------
# Customize system configuration (Section 3.7.3)
# ----------------------------------------------
# wwinit database
- name: Initialize database on master
  ansible.builtin.command: wwinit database
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf
  args:
    creates: /var/lib/warewulf/database

# Clusterwide SSH Key configuration with Warewulf and without
# wwinit ssh_keys
- name: Generate cluster ssh keys on master
  ansible.builtin.command: wwinit ssh_keys
  register: result
  ignore_errors: true
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf
  args:
    creates: /root/.ssh/cluster.pub

- name: Generate cluster ssh keys on master
  ansible.builtin.user:
    name: root
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_type: rsa
    ssh_key_file: .ssh/cluster
  when:
    - inventory_hostname in groups[nt_sms]
    - not enable_warewulf


# cat ~/.ssh/cluster.pub >> $CHROOT/root/.ssh/authorized_keys
- name: Create ~/.ssh in the computing node image
  ansible.builtin.file:
    path: "{{ compute_chroot_loc }}/root/.ssh"
    state: directory
    mode: '0700'
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

# stateful
- name: Create ~/.ssh  on each computing node
  ansible.builtin.file:
    path: "/root/.ssh"
    state: directory
    mode: '0700'
  when:
    - inventory_hostname in groups[nt_cnodes]
    - not enable_warewulf

- name: Copy /root/.ssh/cluster.pub to /tmp to copy the key on master
  ansible.builtin.copy:
    src: "/root/.ssh/cluster.pub"
    dest: "{{ compute_chroot_loc }}/root/cluster.pub"
    mode: '0644'
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

- name: Fetch cluster.pub in sms to a ansible local cluster.pub
  ansible.builtin.fetch:
    src: /root/.ssh/cluster.pub
    dest: "{{ role_path }}/cluster.pub"
    flat: true
  when:
    - inventory_hostname in groups[nt_sms]
    - not enable_warewulf

# stateless
- name: Copy ansible local cluster.pub to /root/.ssh/cluster.pub on master
  ansible.builtin.copy:
    src: "{{ role_path }}/cluster.pub"
    dest: /root/.ssh/cluster.pub
    mode: '0644'
  when:
    - inventory_hostname in groups[nt_cnodes]
    - not enable_warewulf

- name: Copy /root/.ssh/cluster.pub to compute_chroot_loc/root/cluster.pub to copy the key on master
  ansible.builtin.copy:
    src: "/root/.ssh/cluster.pub"
    dest: "{{ compute_chroot_loc }}/root/cluster.pub"
    mode: '0644'
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

- name: Copy cluster.pub to role path to lookup the key file on master
  ansible.builtin.copy:
    src: "/root/.ssh/cluster.pub"
    dest: "{{ role_path }}/cluster.pub"
    mode: '0644'
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

# stateful
- name: Add cluster.pub to authorized_keys on a computing node
  ansible.builtin.lineinfile:
    path: "/root/.ssh/authorized_keys"
    state: present
    backrefs: false
    create: true
    line: "{{ lookup('file', '{{ role_path }}/cluster.pub') }}"
    mode: '0600'
  when:
    - inventory_hostname in groups[nt_cnodes]
    - not enable_warewulf
