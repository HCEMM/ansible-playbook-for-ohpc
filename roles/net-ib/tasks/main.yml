---

# This file is distributed under the Apache License (the
# "License"); you may not use this file except in compliance
# with the License.  See the LICENSE file distributed with
# this work for additional information regarding copyright
# ownership.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This file is derived from recipe.sh in OpenHPC distribution
# and ported by Linaro Ltd. and Fujitsu Ltd.

#
# roles/net-ib/tasks/main.yml
#

# ------------------------------------------------------------
# Add InfiniBand support services on master node (Section 3.5)
# ------------------------------------------------------------

- name: Install Infiniband support on master
  when:
    - enable_linux_ib

  block:
  # yum -y groupinstall "InfiniBand Support"
    - name: Install InfiniBand support on master
      ansible.builtin.dnf:
        state: present
        name:
          - "@InfiniBand Support"
      when:
        - inventory_hostname in groups[nt_sms]

  # systmctl start rdma
    - name: Start rdma services on master
      ansible.builtin.service:
        name: rdma
        state: started
        enabled: true
      when:
        - inventory_hostname in groups[nt_sms]

- name: Setup mellanox
  when:
    - enable_mellanox_ib

  block:
    - name: Download mellanox iso image faile
      get_url: url={{ mellanox_iso_url }} dest=/tmp
      when:
        - inventory_hostname in groups[nt_sms]

    - name: mount mellanox iso image on master
      ansible.builtin.mount:
        name: "/mnt/mlnx" 
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_sms]

# yum install required packages for installing MLNX_OFED_LINUX on master
    - name: Install on master
      ansible.builtin.dnf:
        state: present
        name:
          - pciutils
          - lsof
          - gtk2
          - atk
          - gcc-gfortran
          - tk
          - python-devel
          - pciutils
          - make
          - kernel-devel
          - redhat-rpm-config
          - rpm-build
          - gcc
          - libxml2-python
          - tcsh
          - tcl
      when:
        - inventory_hostname in groups[nt_sms]

# ./mnt/mlnxofedinstall --all  --force
    - name: Run a script "/mnt/mlnxofedinstall --force" on master
      ansible.builtin.command: "/mnt/mlnx/mlnxofedinstall --force {{ mofed_install_opts }}"
      when:
        - inventory_hostname in groups[nt_sms]

    - name: Dump MOFED Install log
      ansible.builtin.debug:
        var: result

    - name: Restart and enable Openibd
      ansible.builtin.service:
        name: openibd
        enabled: true
        state: started
      when:
        - inventory_hostname in groups[nt_sms]

# sleep 2 && shutdown -r now
    - name: Restart sms machine
      ansible.builtin.command: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_reboot == true

    - name: Wait for reboot
      wait_for_connection:
        delay: 30
        timeout: 300
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_reboot       

# Optionally enable opensm subnet manager for Mellanox OFED
- name: Enable opensm subnet manager for Mellanox OFED
  when:
    - enable_opensm
    - inventory_hostname in groups[nt_sms]

  block:
    - name: Install opensm on master
      ansible.builtin.dnf:
        state: present
        name:
          - opensm

    - name: Enable virtualization in OpenSM
      ansible.builtin.lineinfile:
        path: /etc/opensm/opensm.conf
        line: 'virt_enabled 2'
        create: true
        mode: '0644'
      when: enable_socket_direct

    - name: Enable opensm on master
      ansible.builtin.service:
        name: opensmd
        enabled: true
        state: started

# if [[ ${enable_ipoib} -eq 1 ]];then
- name: Enable ib0
  when:
    - inventory_hostname in groups[nt_sms]
    - not enable_dhcpd_server
    - enable_ipoib
    - enable_ifup

  block:
#     # Enable ib0
#     cp /opt/ohpc/pub/examples/network/centos/ifcfg-ib0 /etc/sysconfig/network-scripts
    - name: Copy ifcfg-ib0 on master
      ansible.builtin.copy:
        src: "/opt/ohpc/pub/examples/network/centos/ifcfg-ib0"
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}"
        mode: '0644'

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on master
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}"
        regexp: '^DEVICE=(\S+)'
        replace: "DEVICE={{ sms_ipoib_internal }}" 

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on master
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}"
        regexp: 'master_ipoib'
        replace: "{{ sms_ipoib }}" 

#     perl -pi -e "s/ipoib_netmask/${ipoib_netmask}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB netmask on master
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}"
        regexp: 'ipoib_netmask'
        replace: "{{ ipoib_netmask }}" 

#     ifup ib0
    - name: Initiate ibX on master
      ansible.builtin.command: "ifup {{ sms_ipoib_internal }}"

    - name: Get ib ifcfg template to give to the cnodes
      ansible.builtin.fetch:
        src: "/opt/ohpc/pub/examples/network/centos/ifcfg-ib0"
        dest: "{{ role_path }}/ifcfg-ib"
        flat: true
# fi
- name: Install group "Infinibad Support"
  when:
    - enable_linux_ib

  block:
    # yum -y --installroot=$CHROOT groupinstall "InfiniBand Support"
    - name: Install InfiniBand support to computing node images on master
      ansible.builtin.dnf:
        state: present
        installroot: "{{ compute_chroot_loc }}"
        name:
          - "@InfiniBand Support"
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

    - name: Install InfiniBand support on computing nodes
      ansible.builtin.dnf:
        state: present
        name:
          - "@InfiniBand Support"
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

  # chroot $CHROOT systemctl enable rdma
    - name: Enable rdma for computing node images on master
      ansible.builtin.command: "chroot {{ compute_chroot_loc }} systemctl enable rdma"
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

    - name: Enable rdma on a computing node
      ansible.builtin.service: name=rdma enabled=yes state=started
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

- name: Setup mellanox
  when:
    - enable_mellanox_ib
  block:
    - name: Mount mellanox iso image to computing node images on master
      ansible.posix.mount:
        name: "{{ compute_chroot_loc }}/mnt/mlnx"
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

    - name: Run a script /mnt/mlnxofedinstall --force to computing node images on master
      ansible.builtin.command: "{{ compute_chroot_loc }}/mnt/mlnx/mlnxofedinstall --force {{ mofed_install_opts }}"
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

    - name: Download mellanox iso image faile on computing node
      ansible.builtin.get_url:
        url: {{ mellanox_iso_url }}
        dest: /tmp
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

    - name: Mount mellanox iso image on computing node
      ansible.posix.mount:
        name: "/mnt/mlnx"
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

# yum install pciutils lsof gtk2 atk gcc-gfortran tk
    - name: Install required packages for installing MLNX_OFED_LINUX on computing node
      ansible.builtin.dnf:
        state: present
        name:
          - pciutils
          - lsof
          - gtk2
          - atk
          - gcc-gfortran
          - tk
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

    - name: Run a script "/mnt/mlnxofedinstall --force" on computing node
      ansible.builtin.command: "/mnt/mlnx/mlnxofedinstall --force {{ mofed_install_opts }}"
      register: result
      failed_when: result.rc not in [0]
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

    - name: Restart and enable Openibd
      ansible.builtin.service:
        name: openibd
        enabled: true
        state: started
      when:
        - inventory_hostname in groups[nt_cnodes]
        - not enable_warewulf

# sleep 2 && shutdown -r now
    - name: Restart computing node machine
      ansible.builtin.command: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_reboot

    - name: Wait for reboot
      ansible.builtin.wait_for_connection:
        delay: 30
        timeout: 300
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_reboot

- name: Setup IPoIB
  when:
    - inventory_hostname in groups[nt_cnodes]
    - not enable_dhcpd_server
    - enable_ipoib
    - enable_ifup
    - not enable_warewulf

  block:
    - name: Create an ifcfg-ib file on compute nodes
      ansible.builtin.copy:
        src: "{{ role_path }}/ifcfg-ib"
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}"

  #     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on cnode
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}"
        regexp: '^DEVICE=(\S+)'
        replace: "DEVICE={{ cnodes_ipoib_internal }}"
      with_items: "{{ compute_ipoib }}"
      when:
        - inventory_hostname == item.c_hostname

  #     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on cnode
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}"
        regexp: "master_ipoib"
        replace: "{{ item.c_ipoib }}"
      with_items: "{{ compute_ipoib }}"
      when:
        - inventory_hostname == item.c_hostname

    - name: Define local IPoIB netmask on master
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}"
        regexp: 'ipoib_netmask'
        replace: "{{ ipoib_netmask }}"

    - name: Define local IPoIB address on cnode
      ansible.builtin.replace:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}"
        regexp: "^BOOTPROTO=static"
        replace: "BOOTPROTO=none"

    - name: Make {{ cnodes_ipoib_internal }} up on cnodes
      ansible.builtin.command: "ifup {{ cnodes_ipoib_internal }}"
      with_items: "{{ compute_ipoib }}"
      when:
        - inventory_hostname == item.c_hostname

- name: Create an ifcfg-ib file on cnodes
  when:
    - inventory_hostname in groups[ nt_cnodes ]
    - enable_dhcpd_server
    - enable_ipoib
    - enable_ifup
    - not enable_warewulf

  block:
    - name: Create an ifcfg-ib file on cnodes
      ansible.builtin.copy:
        src: "{{ role_path }}/ifcfg-ib"
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" 

    - name: Make {{ cnodes_ipoib_internal }} up on master
      ansible.builtin.command: "ifup {{ cnodes_ipoib_internal }}"

# perl -pi -e 's/# End of file/\* soft memlock unlimited\n$&/s' /etc/security/limits.conf
# perl -pi -e 's/# End of file/\* hard memlock unlimited\n$&/s' /etc/security/limits.conf
# perl -pi -e 's/# End of file/\* soft memlock unlimited\n$&/s' $CHROOT/etc/security/limits.conf
# perl -pi -e 's/# End of file/\* hard memlock unlimited\n$&/s' $CHROOT/etc/security/limits.conf

- name: Setup memlocks with enable warewulf
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf

  block:
    - name: Remove current soft memlock /etc/security/limits.conf for computing node images on master
      ansible.builtin.replace:
        path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
        regexp: '^\* soft memlock unlimited\n'

    - name: Add soft mem lock to /etc/security/limits.conf for computing node images on master
      ansible.builtin.lineinfile:
        path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
        state: present
        backrefs: true
        regexp: '^(# End of file\s*\n)'
        line: '* soft memlock unlimited\n\1'

    - name: Remove current hard memlock for computing node images on master
      ansible.builtin.replace:
        path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
        regexp: '^\* hard memlock unlimited\n'

    - name: Add hard mem lock for computing node images on master
      ansible.builtin.lineinfile:
        path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
        state: present
        backrefs: true
        regexp: '^(# End of file\s*\n)'
        line: '* hard memlock unlimited\n\1'

- name: Setup memlocks without enable warewulf
  when:
    ( ( inventory_hostname in groups[nt_sms] ) or
    ( inventory_hostname in groups[nt_devnodes] ) or
    ( inventory_hostname in groups[nt_cnodes] ) ) and ( not enable_warewulf )

  block:
    - name: Remove current soft memlock /etc/security/limits.conf on master and computing nodes
      ansible.builtin.replace:
        path: "/etc/security/limits.conf"
        regexp: '^\* soft memlock unlimited\n'

    - name: Add soft mem lock to /etc/security/limits.conf on master and computing nodes
      ansible.builtin.lineinfile:
        path: "/etc/security/limits.conf"
        state: present
        backrefs: true
        regexp: '^(# End of file\s*\n)'
        line: '* soft memlock unlimited\n\1'

    - name: Remove current hard memlock on master and computing nodes
      ansible.builtin.replace:
        path: "/etc/security/limits.conf"
        regexp: '^\* hard memlock unlimited\n'

    - name: Add hard mem lock on master and computing nodes
      ansible.builtin.lineinfile:
        path: "/etc/security/limits.conf"
        state: present
        backrefs: true
        regexp: '^(# End of file\s*\n)'
        line: '* hard memlock unlimited\n\1'

# Optionally, define IPoIB network settings (required if planning to mount Lustre over IB)
# if [[ ${enable_ipoib} -eq 1 ]];then
#      for ((i=0; i<$num_computes; i++)) ; do
#         wwsh -y node set ${c_name[$i]} -D ib0 --ipaddr=${c_ipoib[$i]} --netmask=${ipoib_netmask}
#      done
- name: Define IPoIB network settings
  when:
    - enable_ipoib

  block:
    - name: Define IPoIB network settings on master
      ansible.builtin.command: wwsh -d -v -y node set "{{ item.c_name }}" -D ib0 --ipaddr="{{ item.c_ipoib }}" --netmask="{{ ipoib_netmask }}"
      with_items: "{{ compute_ipoib }}"
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

#      wwsh -y provision set "${compute_regex}" --fileadd=ifcfg-ib0.ww
    - name: Set IPoIB network settings to warewulf data store on master
      ansible.builtin.command: wwsh -d -v -y provision set "{{ compute_regex }}" --fileadd=ifcfg-ib0.ww
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf

# Todo: IB if for each computing node without warewulf
# fi
